from  pyspark.sql  import  SparkSession
from  pyspark.sql.functions  import  *  
from  datetime  import  date,  datetime,timedelta
import argparse


def run_etl(tables):

    spark  =  SparkSession.builder.enableHiveSupport().getOrCreate()
    spark.conf.set('spark.sql.sources.partitionOverwriteMode',  'dynamic')
    today  =  str(date.today()-  timedelta(days=1)).replace('-','');print(today)
    names = tables.split(",")
    """
    shipment header
    """

    sh1 = ['insert overwrite table ' + i + 

    ".shipment_header_df partition (inc_day = '" + today + 

    """
    ') 
    SELECT
        internal_shipment_num,
        warehouse,
        shipping_load_num,
        shipment_id,
        launch_step,
        trailing_sts,
        trailing_sts_date,
        trailing_sts_failed,
        order_type,
        consolidated,
        leading_sts,
        leading_sts_date,
        carrier,
        leading_sts_failed,
        company,
        carrier_service,
        carrier_group,
        carrier_type,
        freight_terms,
        liability_terms,
        customer,
        ship_to,
        route,
        stop,
        ship_to_address1,
        customer_name,
        ship_to_address2,
        ship_to_address3,
        ship_to_city,
        ship_to_state,
        ship_to_country,
        ship_to_postal_code,
        ship_to_phone_num,
        ship_to_fax_num,
        customer_address1,
        launch_num,
        weight_um,
        volume_um,
        routing_code,
        single_item_cartons,
        user_def1,
        user_def2,
        priority,
        user_def3,
        user_def4,
        user_def5,
        user_def6,
        user_def7,
        manually_entered,
        user_def8,
        user_stamp,
        process_stamp,
        date_time_stamp,
        bol_num_alpha,
        pro_num_alpha,
        customer_address3,
        customer_address2,
        customer_attention_to,
        customer_city,
        customer_state,
        customer_country,
        customer_postal_code,
        customer_phone_num,
        customer_fax_num,
        customer_email_address,
        ship_to_name,
        ship_to_attention_to,
        ship_to_email_address,
        requested_delivery_date,
        requested_delivery_type,
        scheduled_ship_date,
        planned_ship_date,
        actual_ship_date_time,
        planned_delivery_date_time,
        actual_delivery_date_time,
        quantity_um,
        total_freight_charge,
        base_freight_charge,
        freight_discount,
        accessorial_charge,
        consolidation_allowed,
        intermediate_consignee,
        intermediate_name,
        intermediate_address1,
        intermediate_address2,
        intermediate_address3,
        intermediate_attention_to,
        intermediate_city,
        intermediate_state,
        intermediate_country,
        intermediate_postal_code,
        intermediate_phone_num,
        intermediate_fax_num,
        intermediate_email_address,
        freight_bill_to,
        freight_bill_to_name,
        freight_bill_to_address1,
        freight_bill_to_address2,
        freight_bill_to_address3,
        freight_bill_to_attention_to,
        freight_bill_to_city,
        freight_bill_to_state,
        freight_bill_to_country,
        freight_bill_to_postal_code,
        freight_bill_to_phone_num,
        freight_bill_to_fax_num,
        freight_bill_to_email_address,
        erp_order,
        internal_order_num,
        export_tax_id,
        parties,
        loading_pier,
        transportation_mode,
        export_port,
        unloading_port,
        containerized,
        ftz,
        validated_license,
        license_exp_date,
        eccn,
        authorized_empl_name,
        authorized_empl_title,
        upload_interface_batch,
        customer_residential_flag,
        shipto_residential_flag,
        rejection_note,
        interface_record_id,
        customer_category1,
        customer_category2,
        customer_category3,
        customer_category4,
        customer_category5,
        customer_category6,
        customer_category7,
        customer_category8,
        customer_category9,
        customer_category10,
        consolidation_dock_loc_area,
        consolidation_dock_loc_pos,
        process_type,
        creation_process_stamp,
        creation_date_time_stamp,
        immediate_needs_note,
        allocate_complete,
        alternate_email_address,
        stop_sequence,
        internal_carrier_num,
        store_distribution,
        total_lbr_estimate,
        weight_entered,
        volume_entered,
        value_entered,
        locked,
        shipper_code,
        in_deletion,
        inventory_load_confirmed,
        last_status_uploaded,
        user_def9,
        user_def10,
        user_def11,
        user_def12,
        user_def13,
        user_def14,
        user_def15,
        user_def16,
        user_def17_date_time,
        user_def18_date_time,
        user_def19_date_time,
        user_def20_date_time
        ,inc_day as src_inc_day 
        FROM (
            select     
        internal_shipment_num,
        warehouse,
        shipping_load_num,
        shipment_id,
        launch_step,
        trailing_sts,
        trailing_sts_date,
        trailing_sts_failed,
        order_type,
        consolidated,
        leading_sts,
        leading_sts_date,
        carrier,
        leading_sts_failed,
        company,
        carrier_service,
        carrier_group,
        carrier_type,
        freight_terms,
        liability_terms,
        customer,
        ship_to,
        route,
        stop,
        ship_to_address1,
        customer_name,
        ship_to_address2,
        ship_to_address3,
        ship_to_city,
        ship_to_state,
        ship_to_country,
        ship_to_postal_code,
        ship_to_phone_num,
        ship_to_fax_num,
        customer_address1,
        launch_num,
        weight_um,
        volume_um,
        routing_code,
        single_item_cartons,
        user_def1,
        user_def2,
        priority,
        user_def3,
        user_def4,
        user_def5,
        user_def6,
        user_def7,
        manually_entered,
        user_def8,
        user_stamp,
        process_stamp,
        date_time_stamp,
        bol_num_alpha,
        pro_num_alpha,
        customer_address3,
        customer_address2,
        customer_attention_to,
        customer_city,
        customer_state,
        customer_country,
        customer_postal_code,
        customer_phone_num,
        customer_fax_num,
        customer_email_address,
        ship_to_name,
        ship_to_attention_to,
        ship_to_email_address,
        requested_delivery_date,
        requested_delivery_type,
        scheduled_ship_date,
        planned_ship_date,
        actual_ship_date_time,
        planned_delivery_date_time,
        actual_delivery_date_time,
        quantity_um,
        total_freight_charge,
        base_freight_charge,
        freight_discount,
        accessorial_charge,
        consolidation_allowed,
        intermediate_consignee,
        intermediate_name,
        intermediate_address1,
        intermediate_address2,
        intermediate_address3,
        intermediate_attention_to,
        intermediate_city,
        intermediate_state,
        intermediate_country,
        intermediate_postal_code,
        intermediate_phone_num,
        intermediate_fax_num,
        intermediate_email_address,
        freight_bill_to,
        freight_bill_to_name,
        freight_bill_to_address1,
        freight_bill_to_address2,
        freight_bill_to_address3,
        freight_bill_to_attention_to,
        freight_bill_to_city,
        freight_bill_to_state,
        freight_bill_to_country,
        freight_bill_to_postal_code,
        freight_bill_to_phone_num,
        freight_bill_to_fax_num,
        freight_bill_to_email_address,
        erp_order,
        internal_order_num,
        export_tax_id,
        parties,
        loading_pier,
        transportation_mode,
        export_port,
        unloading_port,
        containerized,
        ftz,
        validated_license,
        license_exp_date,
        eccn,
        authorized_empl_name,
        authorized_empl_title,
        upload_interface_batch,
        customer_residential_flag,
        shipto_residential_flag,
        rejection_note,
        interface_record_id,
        customer_category1,
        customer_category2,
        customer_category3,
        customer_category4,
        customer_category5,
        customer_category6,
        customer_category7,
        customer_category8,
        customer_category9,
        customer_category10,
        consolidation_dock_loc_area,
        consolidation_dock_loc_pos,
        process_type,
        creation_process_stamp,
        creation_date_time_stamp,
        immediate_needs_note,
        allocate_complete,
        alternate_email_address,
        stop_sequence,
        internal_carrier_num,
        store_distribution,
        total_lbr_estimate,
        weight_entered,
        volume_entered,
        value_entered,
        locked,
        shipper_code,
        in_deletion,
        inventory_load_confirmed,
        last_status_uploaded,
        user_def9,
        user_def10,
        user_def11,
        user_def12,
        user_def13,
        user_def14,
        user_def15,
        user_def16,
        user_def17_date_time,
        user_def18_date_time,
        user_def19_date_time,
        user_def20_date_time
        ,inc_day
        ,row_number() over(partition by 
        internal_shipment_num,
        shipment_id
        order by inc_day desc) as rn 
        FROM 
        """ + i + '.shipment_header) as a where rn = 1'
    for i in names]

    
    sh2 = [i.replace('\n', '') for i in sh1]
    [spark.sql(i) for i in sh2]




def main():
    args = argparse.ArgumentParser()
    tables = "ods_cn_bose,ods_cn_apple_sz,ods_cn_apple_sh,ods_cn_costacoffee,ods_cn_diadora,ods_cn_ferrero,ods_cn_fuji,ods_cn_hd,ods_cn_hp_ljb,ods_cn_hpi,ods_cn_hualiancosta,ods_cn_jiq,ods_cn_kone,ods_cn_michelin,ods_cn_razer,ods_cn_squibb,ods_cn_vzug,ods_cn_zebra,ods_dbo,ods_hk_abbott,ods_hk_revlon,ods_hk_fredperry"
    args.add_argument("--tables", help="tables get done"
                      , default=[tables], nargs="*")

    args_parse = args.parse_args()
    table_names = args_parse.tables[0]
    run_etl(table_names)

if __name__ == '__main__':
    main()
